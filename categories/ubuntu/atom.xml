<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | hmybmny]]></title>
  <link href="https://hmybmny.com/categories/ubuntu/atom.xml" rel="self"/>
  <link href="https://hmybmny.com/"/>
  <updated>2016-10-15T11:23:53+08:00</updated>
  <id>https://hmybmny.com/</id>
  <author>
    <name><![CDATA[hmybmny]]></name>
    <email><![CDATA[hmybmny@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Caffe on Ubuntu 16.04 With GPU]]></title>
    <link href="https://hmybmny.com/2016/10/10/install-caffe-on-ubuntu-16-dot-04-with-gpu/"/>
    <updated>2016-10-10T18:39:54+08:00</updated>
    <id>https://hmybmny.com/2016/10/10/install-caffe-on-ubuntu-16-dot-04-with-gpu</id>
    <content type="html"><![CDATA[<p>这段时间在学习 Caffe 的使用, Caffe 的安装过程并不复杂，但是对于新手来说可能会出现各种各样的问题，有时候折腾几个小时甚至一天都没有成功，所以写下安装过程，方便查阅。</p>

<!-- more -->


<h3>Install with CPU</h3>

<ul>
<li>安装依赖库</li>
</ul>


<pre><code class="sh">sudo apt update

sudo apt upgrade

sudo apt install -y build-essential cmake git pkg-config

sudo apt install -y libprotobuf-dev libleveldb-dev libsnappy-dev \
                    libopencv-dev libhdf5-serial-dev protobuf-compiler

sudo apt install -y --no-install-recommends libboost-all-dev

# 如果使用 OpenBlas 代替默认的 ATLAS的话，需要将 libatlas-base-dev 改为 libopenblas-dev
sudo apt install -y libatlas-base-dev 

sudo apt install -y libgflags-dev libgoogle-glog-dev liblmdb-dev

sudo apt install -y python-pip python-dev python-numpy python-scipy
</code></pre>

<ul>
<li>修改配置文件
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/BVLC/caffe.git&quot;</span>&gt;https://github.com/BVLC/caffe.git&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cd caffe/&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cp Makefile.config.example Makefile.config&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vim Makefile.config
</span></code></pre></td></tr></table></div></figure></p>

<p>取消注释</p>

<blockquote><p>CPU_ONLY := 1</p>

<p>WITH_PYTHON_LAYER := 1</p></blockquote>

<p>如果使用 OpenBlas 代替默认的 ATLAS的话，则修改</p>

<blockquote><p>BLAS := open</p></blockquote>

<p>并运行以下命令</p>

<pre><code class="sh">echo 'export OPENBLAS_NUM_THREADS=4' &gt;&gt; /.bashrc
</code></pre>

<p>修改</p>

<blockquote><p>INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</p>

<p>LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</p></blockquote>

<ul>
<li>安装 make pycaffe 所需的库</li>
</ul>


<p>这一步之前最好先修改 pip 源，由于下载的文件比较大，默认源速度很慢，修改源可以参考 <a href="https://hmybmny.com/2016/10/05/change-sources/">Linux 修改镜像源加快下载速度(pip-RubyGems-NPM-Docker)</a></p>

<pre><code class="sh">cd python

sudo -H pip2 install -r requirements.txt
</code></pre>

<ul>
<li>安装</li>
</ul>


<pre><code class="sh">cd ..
make all -j $(($(nproc) + 1))
make test
make runtest
make pycaffe
make distribute

echo 'export PYTHONPATH=/home/user/caffe/python:$PYTHONPATH' &gt;&gt; /.bashrc # user 是你的用户名

# 重启终端
python
&gt;&gt;&gt;import caffe 
&gt;&gt;&gt;               # 没报错就成功了
</code></pre>

<p>如果选择 CPU 安装的话，最好使用 OpenBlas 代替默认的 ATLAS，因为 OpenBlas 对 CPU 多线程支持很好，能加快一点速度算一点吧。</p>

<h3>Install with GPU (NVIDIA)</h3>

<ul>
<li><p>进入 BIOS，将 Secure Boot 改为 Disabled</p></li>
<li><p>下载 cuda8 和 Patch1 <a href="https://developer.nvidia.com/cuda-release-candidate-download">https://developer.nvidia.com/cuda-release-candidate-download</a></p>

<h5>下载完后双击 cuda-misc-headers-8-0_8.0.27.1-1_amd64.deb 安装 Patch1</h5></li>
<li><p>下载 cuDNN v5.1 Library for Linux <a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p>

<h5>对于想使用 cuDNN 加速的同学，首先得确保你的 GPU 计算能力 (capability) 大于 3.0，至于 GPU 计算能力怎么看我后面会提到。</h5></li>
<li><p>安装依赖库，和 Install with CPU 第一步一样。</p></li>
</ul>


<pre><code class="sh">sudo apt update

sudo apt upgrade

sudo apt install -y build-essential cmake git pkg-config

sudo apt install -y libprotobuf-dev libleveldb-dev libsnappy-dev \
                    libopencv-dev libhdf5-serial-dev protobuf-compiler

sudo apt install -y --no-install-recommends libboost-all-dev

# 如果使用 OpenBlas 代替默认的 ATLAS的话，需要将 libatlas-base-dev 改为 libopenblas-dev
sudo apt install -y libatlas-base-dev 

sudo apt install -y libgflags-dev libgoogle-glog-dev liblmdb-dev

sudo apt install -y python-pip python-dev python-numpy python-scipy
</code></pre>

<ul>
<li>在 Software &amp; Updates 中将 Additional Drivers 下的 NVIDIA Corporation 改为 Using NVIDIA binary driver&hellip;(proprietary, tested)</li>
<li>安装 CUDA</li>
</ul>


<pre><code class="sh">sudo dpkg -i cuda-repo-ubuntu1604-8-0-rc_8.0.27-1_amd64.deb
sudo apt update
sudo apt install cuda
sudo apt install cuda-drivers

cd /usr/local/cuda-8.0/samples/
sudo make all -j $(($(nproc) + 1))

# 查看 GPU 计算能力 (capability)
./1_Utilities/deviceQuery/deviceQuery
</code></pre>

<h5>下图是我查看 GPU 计算能力后的输出结果</h5>

<p><img src="/images/gpu_capability.png" alt="GPU 计算能力" /></p>

<ul>
<li>如果 GPU 计算能力 (capability) 大于 3.0，那么就可以使用 cuDNN 加速，否则跳过这一步，安装 cuDNN</li>
</ul>


<pre><code class="sh"># 到 cuDNN v5.1 Library for Linux 下载后存放的目录，打开终端
tar -xzvf cudnn-8.0-linux-x64-v5.1.tgz
sudo cp cuda/lib64/lib* /usr/local/cuda-8.0/lib64/
sudo cp cuda/include/cudnn.h /usr/local/cuda-8.0/include/
echo 'export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH' &gt;&gt; ~/.bashrc
</code></pre>

<ul>
<li>安装 make pycaffe 所需依赖</li>
</ul>


<p>这一步之前最好先修改 pip 源，由于下载的文件比较大，默认源速度很慢，修改源可以参考 <a href="https://hmybmny.com/2016/10/05/change-sources/">Linux 修改镜像源加快下载速度(pip-RubyGems-NPM-Docker)</a></p>

<pre><code class="sh">cd python

sudo -H pip2 install -r requirements.txt
</code></pre>

<ul>
<li>修改 Makefile.config</li>
</ul>


<p>去掉注释</p>

<blockquote><p>USE_CUDNN := 1</p>

<p>WITH_PYTHON_LAYER := 1</p></blockquote>

<p>修改</p>

<blockquote><p>CUDA_DIR := /usr/local/cuda-8.0</p>

<p>INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</p>

<p>LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</p></blockquote>

<ul>
<li>安装</li>
</ul>


<pre><code class="sh">cd ..
make all -j $(($(nproc) + 1))
make test
make runtest
make pycaffe
make distribute

echo 'export PYTHONPATH=/home/user/caffe/python:$PYTHONPATH' &gt;&gt; /.bashrc # user 是你的用户名

# 重启终端
python
&gt;&gt;&gt;import caffe 
&gt;&gt;&gt;               # 没报错就成功了
</code></pre>

<h3>GPU (AMD)</h3>

<ul>
<li><a href="https://github.com/BVLC/caffe/tree/opencl">https://github.com/BVLC/caffe/tree/opencl</a></li>
<li><a href="https://github.com/amd/OpenCL-caffe">https://github.com/amd/OpenCL-caffe</a></li>
</ul>


<p>参考资料</p>

<ol>
<li><a href="https://github.com/BVLC/caffe">caffe</a></li>
<li><a href="https://github.com/IraAI/caffe-gpu-installation">caffe-gpu-installation</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
